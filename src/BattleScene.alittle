
namespace SuperMarioBros;

struct EntityUserData
{
    int type;
    ALittle.LoopList loop;
}

public class BattleScene : ALittle.DisplayLayout
{
	private ALittle.ScrollScreen _scroll_screen;
	private ALittle.Linear _tile_linear;
	private ALittle.DisplayLayout _entity_container;
    private ALittle.DisplayLayout _effect_container;

	private ALittle.Text _score;
	private ALittle.Text _coin;
	private ALittle.Text _stage;
	private ALittle.Text _time;

    private BattleMap _battle_map;
    private Map<int, Map<int, ALittle.DisplayObject>> _entity_map;
    private BattlePlayer _player;
    private Map<BattleLifeMushroom, bool> _life_mushroom_map;
    private Map<BattleEnemyMushroom, bool> _enemy_mushroom_map;
    private Map<ALittle.DisplayObject, bool> _flag_map;

    private int _coin_value = 0;
    private int _end_time = 0;

    private ALittle.LoopFrame _frame_loop;
    
    public fun TCtor()
    {
        cast<EditContainer>(this._scroll_screen.container).Init(this._tile_linear);
    }

    public async fun Show(int world, int subworld)
    {
        this._battle_map = g_Control.LoadMessageFromFile{BattleMap}("Other/Map/world_"..world.."_"..subworld..".map");
        if (this._battle_map == null)
        {
            ALittle.Error("map load filed! Other/Map/world_"..world.."_"..subworld..".map");
            return;
        }

        this._coin_value = 0;

        this._score.text = g_GCenter.player_data.score;
        this._coin.text = this._coin_value;
        this._stage.text = g_GCenter.player_data.world.."-"..g_GCenter.player_data.subworld;
        this._time.text = 60 * 5;
        var start_time = ALittle.System_GetCurMSTime();
        this._end_time = start_time + 60 * 5 * 1000;
        this._time.text = ALittle.Math_Floor((this._end_time - start_time) / 1000);

        this._tile_linear.RemoveAllChild();
        this._entity_container.RemoveAllChild();
        this._effect_container.RemoveAllChild();
        this._entity_map = new Map<int, Map<int, ALittle.DisplayObject>>();

        this._life_mushroom_map = new Map<BattleLifeMushroom, bool>();
        this._enemy_mushroom_map = new Map<BattleEnemyMushroom, bool>();
        this._flag_map = new Map<ALittle.DisplayObject, bool>();

        for (var row, submap in this._battle_map.background)
        {
            for (var col, index in submap)
            {
                var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                var show_col = index % TILE_COL_COUNT + 1;
                this.SetTileShow(row, col, show_row, show_col);
            }
        }

        for (var row, submap in this._battle_map.object)
        {
            for (var col, type in submap)
            {
                if (type == EntityType.ET_BORN_1)
                    this._player.Init(row + 1, col, g_GCenter.player_data.level);
                elseif (type == EntityType.ET_ENEMY_1)
                {
                    var enemy = g_Control.CreateControl{BattleEnemyMushroom}("enemy_mushroom");
                    enemy.Init(row, col);
                    this._enemy_mushroom_map[enemy] = true;
                    this._entity_container.AddChild(enemy);
                }
                else
                	this.CreateEntity(type, row, col);
            }
        }

        this._scroll_screen.container.width = this._tile_linear.width;
        this._scroll_screen.container_x = 0;
        this._scroll_screen.RefreshClipDisLine();
        
        this.visible = true;

        A_UISystem.keydown_callback = bind(this.HandleKeyDown, this);

        if (this._frame_loop != null)
            this._frame_loop.Stop();
        this._frame_loop = new ALittle.LoopFrame(bind(this.HandleFrame, this));
        this._frame_loop.Start();
    }

    private fun CreateEntity(int type, int row, int col)
    {
        var ui = "";
        if (type == EntityType.ET_WALL_1)
        	ui = "wall_1";
        elseif (type == EntityType.ET_HIDE_WALL_1)
        	ui = "hide_wall_1";
        elseif (type == EntityType.ET_RANDOM_WALL_1)
        	ui = "random_wall_1";
        elseif (type == EntityType.ET_FLAG_1)
        	ui = "flag_1";
        elseif (type == EntityType.ET_FLAG_2)
        	ui = "flag_2";
        elseif (type == EntityType.ET_FLAG_3)
        	ui = "flag_3";
        elseif (type == EntityType.ET_FLAG_4)
        	ui = "flag_4";
        elseif (type == EntityType.ET_FLAG_5)
        	ui = "flag_5";
        else
        	return;

        var entity_sub_map = this._entity_map[row];
        if (entity_sub_map == null)
        {
            entity_sub_map = new Map<int, ALittle.DisplayObject>();
            this._entity_map[row] = entity_sub_map;
        }
        var object = g_Control.CreateControl{ALittle.DisplayObject}(ui);
        entity_sub_map[col] = object;
        object.x = col * TILE_WIDTH;
        object.y = row * TILE_HEIGHT;

        var data = new EntityUserData();
        data.type = type;
        object._user_data = data;

        if (type == EntityType.ET_HIDE_WALL_1)
        	object.visible = false;
        this._entity_container.AddChild(object);

        if (type == EntityType.ET_FLAG_1 || type == EntityType.ET_FLAG_2
            || type == EntityType.ET_FLAG_3 || type == EntityType.ET_FLAG_4
            || type == EntityType.ET_FLAG_5)
        {
            this._flag_map[object] = true;
        }
    }

    private fun SetTileShow(int row, int col, int show_row, int show_col)
    {
        if (this._tile_linear.child_count < col + 1)
        {
            for (var i = this._tile_linear.child_count; i < col + 1; 1)
            {
                var linear = new ALittle.Linear(g_Control);
                linear.type = ALittle.UIEnumTypes.TYPE_V;
                linear.width = TILE_WIDTH;
                this._tile_linear.AddChild(linear);
            }

            this._scroll_screen.container.width = this._tile_linear.width;
            this._scroll_screen.AdjustScrollBar();
        }

        var linear = cast<ALittle.Linear>(this._tile_linear.GetChildByIndex(col + 1));
        if (linear == null) return;

        if (linear.child_count < row + 1)
        {
            for (var i = linear.child_count; i < row + 1; 1)
            {
                var sprite = new ALittle.Sprite(g_Control);
                sprite.texture_name = TILE_TEXTURE_NAME;
                sprite.row_count = TILE_ROW_COUNT;
                sprite.col_count = TILE_COL_COUNT;
                sprite.width = TILE_WIDTH;
                sprite.height = TILE_HEIGHT;
                sprite.visible = false;
                linear.AddChild(sprite);
            }
        }

        var sprite = cast<ALittle.Sprite>(linear.GetChildByIndex(row + 1));
        sprite.row_index = show_row;
        sprite.col_index = show_col;
        sprite.visible = true;
    }

    private fun TestCollision(ALittle.DisplayObject a, ALittle.DisplayObject b) : bool
    {
        if (a.x + a.width < b.x) return false;
        if (a.x > b.x + b.width) return false;
        if (a.y + a.height < b.y) return false;
        if (a.y > b.y + b.height) return false;
        return true;
    }

    private fun HandleFrame(int frame_time)
    {
        if (this._player.win && this._player.visible && g_GCenter.battle_scene.CheckOutDoor(this._player))
        {
            this._player.visible = false;
            this._player.Idle();

            g_GCenter.login_scene.UpdateTopScore();
            // 定时跳转
            var loop = new ALittle.LoopList();
            loop.AddUpdater(new ALittle.LoopTimer(bind(g_GCenter.battle_scene.NextStage, g_GCenter.battle_scene), 1000));
            loop.Start();
        }

        var cur_time = ALittle.System_GetCurMSTime();
        var delta_time = ALittle.Math_Floor((this._end_time - cur_time) / 1000);
        if (delta_time <= 0) delta_time = 0;
        this._time.text = ALittle.Math_Floor(delta_time);
        if (delta_time <= 0)
        {
            this._player.Death();
            return;
        }

        this._player.UpdateFrame(frame_time);

        var scroll_x = -(this._player.x - this._scroll_screen.view_width / 2);
        if (scroll_x > 0) scroll_x = 0;
        elseif (scroll_x <= -(this._scroll_screen.container.width - this._scroll_screen.view_width))
            scroll_x = -(this._scroll_screen.container.width - this._scroll_screen.view_width);
        if (this._scroll_screen.container_x > scroll_x)
        	this._scroll_screen.container_x = scroll_x;
        
        // 检查玩家死亡
        if (this._player.y >= A_UISystem.view_height)
        {
            this._player.Death();
        }

        // 处理旗杆
        if (this._player.state != PlayerState.PS_DEATH && this._player.state != PlayerState.PS_FLAG && !this._player.win)
        {
            for (var flag, _ in this._flag_map)
            {
                if (this.TestCollision(this._player, flag))
                {
                    if (this._player.right)
                    {
                        if (this._player.x >= flag.x - TILE_WIDTH / 2)
                        {
                            this._player.x = flag.x - TILE_WIDTH / 2;
                            this._player.Flag();
                            break;
                        }
                    }
                    else
                    {
                        if (this._player.x <= flag.x + flag.width - TILE_WIDTH / 2)
                        {
                            this._player.x = flag.x + flag.width - TILE_WIDTH / 2;
                            this._player.Flag();
                            break;
                        }
                    }
                }
            }
        }

        // 处理敌军蘑菇
        if (this._player.state != PlayerState.PS_DEATH)
        {
            // 如果蘑菇已经在屏幕可见范围，那么就开始走动
            var remove_map:Map<BattleEnemyMushroom, bool>;
            for (var enemy, _ in this._enemy_mushroom_map)
        	{
            	if (enemy.x < -this._scroll_screen.container_x + this._scroll_screen.view_width)
            		enemy.TryWalk();
            	enemy.UpdateFrame(frame_time);

                if (enemy.y >= A_UISystem.view_height)
                {
                    if (remove_map == null) remove_map = new Map<BattleEnemyMushroom, bool>();
                    remove_map[enemy] = true;
                    this._entity_container.RemoveChild(enemy);
                }
        	}

            for (var enemy, _ in this._enemy_mushroom_map)
        	{
                if (this._player.state == PlayerState.PS_DEATH) break;

                // 如果碰撞了
                if (enemy.state != EnemyMushroomState.EMS_DEATH && this.TestCollision(this._player, enemy))
                {
                    // 如果是踩的，就是蘑菇阵亡
                    if (this._player.y + this._player.height - enemy.y < TILE_HEIGHT)
                    {
                        if (remove_map == null) remove_map = new Map<BattleEnemyMushroom, bool>();
                        remove_map[enemy] = true;

                        enemy.Death();
                        var remove_loop = new ALittle.LoopList();
                        remove_loop.AddUpdater(new ALittle.LoopTimer(bind(this.EntityRemoveChild, this, enemy), 200));
                        remove_loop.Start();
                        this._player.SmallJump();

                        // 飘出一个加命的文本
                        {
                            g_GCenter.player_data.score += 100;
                            this._score.text = g_GCenter.player_data.score;

                            var coin_text = g_Control.CreateControl{ALittle.DisplayObject}("effect_coin_text");
                            coin_text.text = "100";
                            coin_text.x = enemy.x + enemy.width / 2 - coin_text.width / 2;
                            coin_text.y = enemy.y - coin_text.height;
                            this._effect_container.AddChild(coin_text);
                            var loop = new ALittle.LoopList();
                            loop.AddUpdater(new ALittle.LoopLinear(coin_text, "y", coin_text.y - TILE_HEIGHT * 2, 200, 0));
                            loop.AddUpdater(new ALittle.LoopTimer(bind(this.EffectRemoveChild, this, coin_text), 200));
                            loop.Start();
                        }
                    }
                    else
                    {
                        this._player.Death();
                    }
                }
        	}
            if (remove_map != null)
            {
                for (var mushroom, _ in remove_map)
                {
                    this._enemy_mushroom_map[mushroom] = null;
                }
            }
        }

        // 处理奖励蘑菇
        if (this._player.state != PlayerState.PS_DEATH)
        {
            var remove_map:Map<BattleLifeMushroom, bool>;
            for (var mushroom, _ in this._life_mushroom_map)
            {
                mushroom.UpdateFrame(frame_time);
    
                if (mushroom.y >= A_UISystem.view_height)
                {
                    if (remove_map == null) remove_map = new Map<BattleLifeMushroom, bool>();
                    remove_map[mushroom] = true;
                }
                // 玩家与蘑菇的碰撞
                elseif (this.TestCollision(this._player, mushroom))
                {
                    if (remove_map == null) remove_map = new Map<BattleLifeMushroom, bool>();
                    remove_map[mushroom] = true;
    
                    g_GCenter.player_data.life += 1;
                    // 飘出一个加命的文本
                    {
                        var coin_text = g_Control.CreateControl{ALittle.DisplayObject}("effect_coin_text");
                        coin_text.text = "1 UP";
                        coin_text.x = this._player.x + this._player.width / 2 - coin_text.width / 2;
                        coin_text.y = this._player.y - coin_text.height;
                        this._effect_container.AddChild(coin_text);
                        var loop = new ALittle.LoopList();
                        loop.AddUpdater(new ALittle.LoopLinear(coin_text, "y", coin_text.y - TILE_HEIGHT * 2, 200, 0));
                        loop.AddUpdater(new ALittle.LoopTimer(bind(this.EffectRemoveChild, this, coin_text), 200));
                        loop.Start();
                    }
                }
            }
            if (remove_map != null)
            {
                for (var mushroom, _ in remove_map)
                {
                    this._life_mushroom_map[mushroom] = null;
                    this._entity_container.RemoveChild(mushroom);
                }
            }
        }
    }

    public fun Restart()
    {
        if (g_GCenter.player_data.life <= 0)
        {
            this.Hide();
            g_GCenter.login_scene.Show();
            return;
        }

        g_GCenter.player_data.life -= 1;
        g_GCenter.player_data.level = 1;
        this.Hide();
        g_GCenter.stage_scene.Show(g_GCenter.player_data.world, g_GCenter.player_data.subworld);
    }

    public fun NextStage()
    {
        this.Hide();
        g_GCenter.stage_scene.Show(g_GCenter.player_data.world, g_GCenter.player_data.subworld);
    }

    // 检查头部是否撞到东西
    public fun CheckUp(BattlePlayer entity) : bool, double
    {
        var row = ALittle.Math_Floor((entity.y - 1) / TILE_HEIGHT);
        var min_col = ALittle.Math_Floor(entity.x / TILE_WIDTH);
        var max_col = ALittle.Math_Floor((entity.x + entity.width - 1) / TILE_WIDTH);

        var check = false;
        for (var col = min_col; col <= max_col; 1)
        {
            var sub_map = this._entity_map[row];
            if (sub_map != null)
            {
                var object = sub_map[col];
                if (object != null)
                {
                    var data = cast<EntityUserData>(object._user_data);
                    if (data.type == EntityType.ET_WALL_1)
                    {
                        // 如果是1级，那么就播放
                        if (g_GCenter.player_data.level == 1)
                        {
                            if (data.loop != null) data.loop.SetCompleted();
                            data.loop = new ALittle.LoopList();
                            data.loop.AddUpdater(new ALittle.LoopLinear(object, "y", object.y - TILE_HEIGHT / 2, 100, 0));
                            data.loop.AddUpdater(new ALittle.LoopLinear(object, "y", object.y, 100, 0));
                            data.loop.Start();
                        }
                        else
                        {
                            sub_map[col] = null;
                            this._entity_container.RemoveChild(object);

                        	var link_map = new Map<string, ALittle.DisplayObject>();
                            var anti_object = g_Control.CreateControl{ALittle.DisplayObject}("wall_split_anti", link_map);
                            anti_object.x = object.x;
                            anti_object.y = object.y;
                            this._effect_container.AddChild(anti_object);
                            var anti = anti_object.CreateLoopAnimation("split");
                            anti.Init(link_map);
                            anti.Play();
                            var loop = new ALittle.LoopList();
                            loop.AddUpdater(new ALittle.LoopTimer(bind(this.EffectRemoveChild, this, anti_object), 1000));
                            loop.Start();
                        }
                        check = true;
                    }
                    elseif (data.type == EntityType.ET_IRON)
                    {
                        check = true;
                    }
                    elseif (data.type == EntityType.ET_RANDOM_WALL_1)
                    {
                        sub_map[col] = null;
                        this._entity_container.RemoveChild(object);

                        // 构建一个新的对象
                        var sprite = new ALittle.Sprite(g_Control);
                        sprite.texture_name = TILE_TEXTURE_NAME;
                        sprite.width = TILE_WIDTH;
                        sprite.height = TILE_HEIGHT;
                        sprite.row_count = TILE_ROW_COUNT;
                        sprite.col_count = TILE_COL_COUNT;
                        sprite.col_index = 7;
                        sprite.row_index = 1;

                        var sprite_data = new EntityUserData();
                        sprite_data.type = EntityType.ET_IRON;
                        sprite._user_data = sprite_data;

                        sub_map[col] = sprite;
                        this._entity_container.AddChild(sprite);
                        sprite.x = object.x;
                        sprite.y = object.y;
                        object = sprite;

                        if (sprite_data.loop != null) sprite_data.loop.SetCompleted();
                        sprite_data.loop = new ALittle.LoopList();
                        sprite_data.loop.AddUpdater(new ALittle.LoopLinear(object, "y", object.y - TILE_HEIGHT / 2, 100, 0));
                        sprite_data.loop.AddUpdater(new ALittle.LoopLinear(object, "y", object.y, 100, 0));
                        sprite_data.loop.Start();

                        // 然后飘出一个金币
                        {
                            var coin = g_Control.CreateControl{ALittle.SpritePlay}("effect_coin");
                            coin.x = object.x + object.width / 2 - coin.width / 2;
                            coin.y = object.y - coin.height;
                            coin.Play();
                            this._effect_container.AddChild(coin);
                            var loop = new ALittle.LoopList();
                            loop.AddUpdater(new ALittle.LoopLinear(coin, "y", coin.y - TILE_HEIGHT * 3, 200, 0));
                            loop.AddUpdater(new ALittle.LoopTimer(bind(this.EffectRemoveChild, this, coin), 200));
                            loop.AddUpdater(new ALittle.LoopTimer(bind(coin.Stop, coin), 0));
                            loop.Start();
                        }

                        // 飘出一个分数
                        {
                            this._coin_value += 1;
                            this._coin.text = this._coin_value;
                            g_GCenter.player_data.score += 200;
                            this._score.text = g_GCenter.player_data.score;

                            var coin_text = g_Control.CreateControl{ALittle.DisplayObject}("effect_coin_text");
                            coin_text.text = 200;
                            coin_text.x = object.x + object.width / 2 - coin_text.width / 2;
                            coin_text.y = object.y - coin_text.height;
                            this._effect_container.AddChild(coin_text);
                            var loop = new ALittle.LoopList();
                            loop.AddUpdater(new ALittle.LoopLinear(coin_text, "y", coin_text.y - TILE_HEIGHT * 2, 200, 0));
                            loop.AddUpdater(new ALittle.LoopTimer(bind(this.EffectRemoveChild, this, coin_text), 200));
                            loop.Start();
                        }

                        check = true;
                    }
                    elseif (data.type == EntityType.ET_HIDE_WALL_1)
                    {
                        object.visible = true;

                        if (data.loop != null) data.loop.SetCompleted();
                        data.loop = new ALittle.LoopList();
                        data.loop.AddUpdater(new ALittle.LoopLinear(object, "y", object.y - TILE_HEIGHT / 2, 100, 0));
                        data.loop.AddUpdater(new ALittle.LoopLinear(object, "y", object.y, 100, 0));
                        data.loop.AddUpdater(new ALittle.LoopTimer(bind(this.BornLifeMushroom, this, row, col, object), 0));
                        data.loop.Start();

                        check = true;
                    }

                }
            }
        }
        if (check) return true, row * TILE_HEIGHT + TILE_HEIGHT;
        return false, null;
    }

    private fun BornLifeMushroom(int row, int col, ALittle.DisplayObject object)
    {
        var index = this._entity_container.GetChildIndex(object);
        // 然后产出一个蘑菇
        var mushroom = g_Control.CreateControl{BattleLifeMushroom}("life_mushroom");
        this._life_mushroom_map[mushroom] = true;
        this._entity_container.AddChild(mushroom, index);
        mushroom.Born(row, col);
    }

    public fun EffectRemoveChild(ALittle.DisplayObject object)
    {
        this._effect_container.RemoveChild(object);
    }

    public fun EntityRemoveChild(ALittle.DisplayObject object)
    {
        this._entity_container.RemoveChild(object);
    }

    // 检查entity底部是不是地板
    public fun CheckDown(ALittle.DisplayObject entity) : bool, double
    {
        var row = ALittle.Math_Floor((entity.y + entity.height) / TILE_HEIGHT);
        var min_col = ALittle.Math_Floor(entity.x / TILE_WIDTH);
        var max_col = ALittle.Math_Floor((entity.x + entity.width - 1) / TILE_WIDTH);
        for (var col = min_col; col <= max_col; 1)
        {
            var sub_map = this._battle_map.background[row];
            if (sub_map != null)
            {
                var index = sub_map[col];
                if (index != null)
                {
                    var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                    var show_col = index % TILE_COL_COUNT + 1;

                    var check = show_row == 1 && show_col == 1  // 检查地板
                        || show_row >= 3 && show_row <= 4 && show_col >= 1 && show_col <= 2	// 检查水管
                    	|| show_row == 3 && show_col == 3;  // 检查地板

                    if (check) return true, row * TILE_HEIGHT;
                }
            }

            var sub_entity_map = this._entity_map[row];
            if (sub_entity_map != null)
            {
                var object = sub_entity_map[col];
                if (object != null)
                {
                    var type = cast<EntityUserData>(object._user_data).type;
                    var check = type == EntityType.ET_RANDOM_WALL_1
                        || type == EntityType.ET_WALL_1
                    	|| (type == EntityType.ET_HIDE_WALL_1 && object.visible)
                        || type == EntityType.ET_IRON;

                    if (check) return true, row * TILE_HEIGHT;
                }
            }
        }
        return false, null;
    }

    // 检查出口
    public fun CheckOutDoor(ALittle.DisplayObject entity) : bool
    {
        var col = ALittle.Math_Floor((entity.x + entity.width) / TILE_WIDTH) - 1;
        var min_row = ALittle.Math_Floor(entity.y / TILE_HEIGHT);
        var max_row = ALittle.Math_Floor((entity.y + entity.height - 1) / TILE_HEIGHT);
        for (var row = min_row; row <= max_row; 1)
        {
            var sub_map = this._battle_map.background[row];
            if (sub_map != null)
            {
                var index = sub_map[col];
                if (index != null)
                {
                    var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                    var show_col = index % TILE_COL_COUNT + 1;

                    var check = show_row == 7 && show_col == 2;  // 检查出口

                    if (check) return true;
                }
            }
        }

        return false;
    }

    // 检查右边是否可走
    public fun CheckRight(ALittle.DisplayObject entity) : bool, double
    {
        var col = ALittle.Math_Floor((entity.x + entity.width) / TILE_WIDTH);
        var min_row = ALittle.Math_Floor(entity.y / TILE_HEIGHT);
        var max_row = ALittle.Math_Floor((entity.y + entity.height - 1) / TILE_HEIGHT);
        for (var row = min_row; row <= max_row; 1)
        {
            var sub_map = this._battle_map.background[row];
            if (sub_map != null)
            {
                var index = sub_map[col];
                if (index != null)
                {
                    var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                    var show_col = index % TILE_COL_COUNT + 1;

                    var check = show_row == 1 && show_col == 1  // 检查地板
                        || show_row >= 3 && show_row <= 4 && show_col >= 1 && show_col <= 2	// 检查水管
                    	|| show_row == 3 && show_col == 3;  // 检查地板

                    if (check) return true, col * TILE_WIDTH;
                }
            }

            var sub_entity_map = this._entity_map[row];
            if (sub_entity_map != null)
            {
                var object = sub_entity_map[col];
                if (object != null)
                {
                    var type = cast<EntityUserData>(object._user_data).type;
                    var check = type == EntityType.ET_RANDOM_WALL_1
                        || type == EntityType.ET_WALL_1
                    	|| (type == EntityType.ET_HIDE_WALL_1 && object.visible)
                        || type == EntityType.ET_IRON;

                    if (check) return true, col * TILE_WIDTH;
                }
            }
        }
        return false, null;
    }

    // 检查左边是否可走
    public fun CheckLeft(ALittle.DisplayObject entity) : bool, double
    {
        var col = ALittle.Math_Floor((entity.x - 1) / TILE_WIDTH);
        var min_row = ALittle.Math_Floor(entity.y / TILE_HEIGHT);
        var max_row = ALittle.Math_Floor((entity.y + entity.height - 1) / TILE_HEIGHT);
        for (var row = min_row; row <= max_row; 1)
        {
            var sub_map = this._battle_map.background[row];
            if (sub_map != null)
            {
                var index = sub_map[col];
                if (index != null)
                {
                    var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                    var show_col = index % TILE_COL_COUNT + 1;

                    var check = show_row == 1 && show_col == 1  // 检查地板
                        || show_row >= 3 && show_row <= 4 && show_col >= 1 && show_col <= 2	// 检查水管
                    	|| show_row == 3 && show_col == 3;  // 检查地板

                    if (check) return true, col * TILE_WIDTH + TILE_WIDTH;
                }
            }

            var sub_entity_map = this._entity_map[row];
            if (sub_entity_map != null)
            {
                var object = sub_entity_map[col];
                if (object != null)
                {
                    var type = cast<EntityUserData>(object._user_data).type;
                    var check = type == EntityType.ET_RANDOM_WALL_1
                        || type == EntityType.ET_WALL_1
                    	|| (type == EntityType.ET_HIDE_WALL_1 && object.visible)
                        || type == EntityType.ET_IRON;

                    if (check) return true, col * TILE_WIDTH + TILE_WIDTH;
                }
            }
        }
        return false, null;
    }

    private fun HandleKeyDown(int mod, int sym, int scancode)
    {
        if (sym == ALittle.UIEnumTypes.KEY_J)
        {
            this._player.Fire();
        }
    }

    public fun Hide()
    {
        if (this._frame_loop != null)
            this._frame_loop.Stop();
        this._frame_loop = null;

        this.visible = false;
    }
}
