
namespace SuperMarioBros;

public class EditContainer : ALittle.DisplayLayout
{
	private ALittle.Linear _tile_linear;
    public fun Init(ALittle.Linear tile_linear)
    {
        this._tile_linear = tile_linear;
    }

    // 裁剪，优化渲染速度
    public fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        this._tile_linear.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }
}

protected struct EditEntityInfo
{
    string ui;
    int type;
    double width;
    double height;
    double center_x;
    double center_y;
}

public class EditScene : ALittle.DisplayLayout
{
	private ALittle.Image _tile_image;
	private ALittle.Sprite _select_tile;
	private ALittle.TextInput _world_input;
	private ALittle.TextInput _subworld_input;

    private ALittle.ScrollScreen _scroll_screen;
	private ALittle.Linear _tile_linear;

    private ALittle.DisplayLayout _entity_container;
    private Map<int, Map<int, ALittle.DisplayObject>> _entity_map;

    private ALittle.DisplayLayout _entity_panel;
    private ALittle.DisplayObject _entity_random_wall_1;	// 随机奖励墙1
    private ALittle.DisplayObject _entity_wall_1;	// 普通墙1
    private ALittle.DisplayObject _entity_hide_wall_1;	// 隐藏墙1
    private ALittle.DisplayObject _entity_enemy_1;	// 蘑菇1
    private ALittle.DisplayObject _entity_enemy_2;	// 鸭子1

    private ALittle.DisplayObject _entity_flag_1;	// 旗帜1
    private ALittle.DisplayObject _entity_flag_2;	// 旗帜2
    private ALittle.DisplayObject _entity_flag_3;	// 旗帜3
    private ALittle.DisplayObject _entity_flag_4;	// 旗帜4
    private ALittle.DisplayObject _entity_flag_5;	// 旗帜5

    private ALittle.DisplayObject _entity_born_1;	// 出生点

    private Map<int, EditEntityInfo> _entity_info_map;

    private ALittle.DisplayObject _select_frame;

    private BattleMap _cur_data;
    private string _path;

    public fun TCtor()
    {
        cast<EditContainer>(this._scroll_screen.container).Init(this._tile_linear);
        this._entity_panel.visible = false;

        this._entity_info_map = new Map<int, EditEntityInfo>();
        this._entity_map = new Map<int, Map<int, ALittle.DisplayObject>>();

        this.AddEntity("wall_1", EntityType.ET_WALL_1, this._entity_wall_1);
        this.AddEntity("hide_wall_1", EntityType.ET_HIDE_WALL_1, this._entity_hide_wall_1);
        this.AddEntity("random_wall_1", EntityType.ET_RANDOM_WALL_1, this._entity_random_wall_1);

        this.AddEntity("enemy_1", EntityType.ET_ENEMY_1, this._entity_enemy_1);
        this.AddEntity("enemy_2", EntityType.ET_ENEMY_2, this._entity_enemy_2);

        this.AddEntity("flag_1", EntityType.ET_FLAG_1, this._entity_flag_1);
        this.AddEntity("flag_2", EntityType.ET_FLAG_2, this._entity_flag_2);
        this.AddEntity("flag_3", EntityType.ET_FLAG_3, this._entity_flag_3);
        this.AddEntity("flag_4", EntityType.ET_FLAG_4, this._entity_flag_4);
        this.AddEntity("flag_5", EntityType.ET_FLAG_5, this._entity_flag_5);

        this.AddEntity("born_1", EntityType.ET_BORN_1, this._entity_born_1);

        this._select_frame._user_data = this._entity_info_map[EntityType.ET_RANDOM_WALL_1];
    }

    private fun AddEntity(string ui, int type, ALittle.DisplayObject object)
    {
        var info = new EditEntityInfo();
        info.ui = ui;
        info.type = type;
        info.width = object.width;
        info.height = object.height;
        info.center_x = object.center_x;
        info.center_y = object.center_y;
        object._user_data = info;
        object.AddEventListener(this, this.HandleEntitySelectClick);
        this._entity_info_map[type] = info;
    }

    public fun Show()
    {
        this.visible = true;

        this.Load(1, 1);
        ALittle.File_MakeDeepDir(g_ModuleBasePath.."Other/Map");

        ALittle.System_SetViewSize(ALittle.Math_Floor(this.width), ALittle.Math_Floor(this.height));
    }

    public fun Hide()
    {
        this.visible = false;
    }

    private async fun Load(int world, int subworld)
    {
        this.Save();

        this._world_input.text = world;
        this._subworld_input.text = subworld;
        this._path = "Other/Map/world_"..world.."_"..subworld..".map";
        this._cur_data = g_Control.LoadMessageFromFile{BattleMap}(this._path);
        if (this._cur_data == null)
        {
            this._cur_data = new BattleMap();
            this._cur_data.row_count = 0;
            this._cur_data.col_count = 0;
            this._cur_data.background = new Map<int, Map<int, int>>();
            this._cur_data.object = new Map<int, Map<int, int>>();
        }

        this._tile_linear.RemoveAllChild();
        this._entity_container.RemoveAllChild();
        this._entity_map = new Map<int, Map<int, ALittle.DisplayObject>>();

        for (var row, submap in this._cur_data.background)
        {
            for (var col, index in submap)
            {
                var show_row = ALittle.Math_Floor(index / this._select_tile.col_count) + 1;
                var show_col = index % this._select_tile.col_count + 1;
                this.SetTileShow(row, col, show_row, show_col);
            }
        }

        for (var row, submap in this._cur_data.object)
        {
            for (var col, type in submap)
            {
                this.SetEntityShow(row, col, type);
            }
        }
        this._scroll_screen.container.width = this._tile_linear.width + this._scroll_screen.view_width;
        this._scroll_screen.AdjustScrollBar();
    }

    public fun Save()
    {
        if (this._cur_data == null) return;

        this._cur_data.row_count = 0;
        this._cur_data.col_count = 0;

        this._cur_data.background = new Map<int, Map<int, int>>();
        for (var index, linear:ALittle.Linear in this._tile_linear.childs)
        {
            var col = index - 1;
            for (var subindex, sprite:ALittle.Sprite in linear.childs)
            {
                if (sprite.visible)
                {
                    var row = subindex - 1;
                    var submap = this._cur_data.background[row];
                    if (submap == null)
                    {
                        submap = new Map<int, int>();
                        this._cur_data.background[row] = submap;
                    }

                    submap[col] = (sprite.row_index - 1) * this._select_tile.col_count + (sprite.col_index - 1);

                    if (this._cur_data.row_count < row + 1)
                        this._cur_data.row_count = row + 1;
                    if (this._cur_data.col_count < col + 1)
                    	this._cur_data.col_count = col + 1;
                }
            }
        }
        this._cur_data.object = new Map<int, Map<int, int>>();
        for (var row, entity_submap in this._entity_map)
        {
            for (var col, object in entity_submap)
            {
                var submap = this._cur_data.object[row];
                if (submap == null)
                {
                    submap = new Map<int, int>();
                    this._cur_data.object[row] = submap;
                }
                submap[col] = cast<EditEntityInfo>(object._user_data).type;
            }
        }

        var rflct = reflect<BattleMap>;

        // 打开文件
        var factory:ALittle.IMessageWriteFactory;
        [Language(Lua)]
        factory = new carp.CarpMessageWriteFactory();
        [Language(JavaScript)]
        factory = new JavaScript.JMessageWriteFactory(1024);
        if (factory == null)
        {
            ALittle.Error("factory create failed");
            return;
        }

        // 获取反射信息
        var invoke_info = ALittle.CreateMessageInfo(rflct.name);
        if (invoke_info == null)
        {
            ALittle.Error("create message info failed:"..rflct.name);
            return;
        }

        // 反序列化
        ALittle.PS_WriteMessage(factory, invoke_info, null, this._cur_data);

        // 保存到文件
        factory.WriteToStdFile(ALittle.File_BaseFilePath()..g_ModuleBasePath..this._path);
    }

    private fun HandleEntitySelectClick(ALittle.UILButtonDownEvent event)
    {
        this._select_frame.x = event.target.x;
        this._select_frame.y = event.target.y;
        this._select_frame._user_data = event.target._user_data;
    }

    private fun HandleTileTabClick(ALittle.UILButtonDownEvent event)
    {
        this._entity_panel.visible = false;
        this._tile_image.visible = true;
        this._select_tile.visible = true;
    }

    private fun HandleEntityTabClick(ALittle.UILButtonDownEvent event)
    {
        this._entity_panel.visible = true;
        this._tile_image.visible = false;
        this._select_tile.visible = false;
    }

    private fun CursorHandleImpl(double rel_x, double rel_y)
    {
        var shift = A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_LSHIFT] != null;

        var col = ALittle.Math_Floor((rel_x - this._scroll_screen.container_x) / this._select_tile.width);
        var row = ALittle.Math_Floor((rel_y - this._scroll_screen.container_y) / this._select_tile.height);

        if (this._tile_image.visible)
        {
            if (shift) this.RemoveTileShow(row, col);
            else this.SetTileShow(row, col, this._select_tile.row_index, this._select_tile.col_index);
        }
        elseif (this._entity_panel.visible)
        {
            var info = cast<EditEntityInfo>(this._select_frame._user_data);
            if (info == null) return;

            if (shift) this.RemoveEntityShow(row, col);
            else this.SetEntityShow(row, col, info.type);
        }
    }

    private fun HandleTileQuadClick(ALittle.UILButtonDownEvent event) { this.CursorHandleImpl(event.rel_x, event.rel_y); }
    private fun HandleTileQuadDrag(ALittle.UIButtonDragEvent event) { this.CursorHandleImpl(event.rel_x, event.rel_y); }

    private fun SetTileShow(int row, int col, int show_row, int show_col)
    {
        if (this._tile_linear.child_count < col + 1)
        {
            for (var i = this._tile_linear.child_count; i < col + 1; 1)
            {
                var linear = new ALittle.Linear(g_Control);
                linear.type = ALittle.UIEnumTypes.TYPE_V;
                linear.width = this._select_tile.width;
                this._tile_linear.AddChild(linear);
            }

            this._scroll_screen.container.width = this._tile_linear.width + this._scroll_screen.view_width;
            this._scroll_screen.AdjustScrollBar();
        }

        var linear = cast<ALittle.Linear>(this._tile_linear.GetChildByIndex(col + 1));
        if (linear == null) return;

        if (linear.child_count < row + 1)
        {
            for (var i = linear.child_count; i < row + 1; 1)
            {
                var sprite = new ALittle.Sprite(g_Control);
                sprite.texture_name = this._select_tile.texture_name;
                sprite.row_count = this._select_tile.row_count;
                sprite.col_count = this._select_tile.col_count;
                sprite.width = this._select_tile.width;
                sprite.height = this._select_tile.height;
                sprite.visible = false;
                linear.AddChild(sprite);
            }
        }

        var sprite = cast<ALittle.Sprite>(linear.GetChildByIndex(row + 1));
        sprite.row_index = show_row;
        sprite.col_index = show_col;
        sprite.visible = true;

        this._scroll_screen.AdjustScrollBar();
        this._scroll_screen.RefreshClipDisLine();
    }

    private fun SetEntityShow(int row, int col, int type)
    {
        this.RemoveEntityShow(row, col);

        var info = this._entity_info_map[type];
        if (info == null) return;

        var submap = this._entity_map[row];
        if (submap == null)
        {
            submap = new Map<int, ALittle.DisplayObject>();
            this._entity_map[row] = submap;
        }
        var object = g_Control.CreateControl{ALittle.DisplayObject}(info.ui);
        object._user_data = info;
        object.width = info.width;
        object.height = info.height;
        object.center_x = info.center_x;
        object.center_y = info.center_y;
        object.x = col * this._select_tile.width;
        object.y = row * this._select_tile.height;
        this._entity_container.AddChild(object);
        submap[col] = object;
    }

    private fun RemoveEntityShow(int row, int col)
    {
        var submap = this._entity_map[row];
        if (submap == null) return;

        var object = submap[col];
        if (object == null) return;

        submap[col] = null;
        this._entity_container.RemoveChild(object);
    }

    private fun RemoveTileShow(int row, int col)
    {
        var linear = cast<ALittle.Linear>(this._tile_linear.GetChildByIndex(col + 1));
        if (linear == null) return;
        var sprite = cast<ALittle.Sprite>(linear.GetChildByIndex(row + 1));
        if (sprite == null) return;
        sprite.visible = false;

        if (col + 1 != this._tile_linear.child_count) return;

        for (var i = this._tile_linear.child_count; i >= 1; -1)
        {
            var remove = true;
            linear = cast<ALittle.Linear>(this._tile_linear.childs[i]);
            for (var index, child in linear.childs)
            {
                if (child.visible)
                {
                    remove = false;
                    break;
                }
            }

            if (remove)
	            this._tile_linear.RemoveChild(linear);
            else
            	break;
        }

        this._scroll_screen.container.width = this._tile_linear.width + this._scroll_screen.view_width;
        this._scroll_screen.AdjustScrollBar();
        this._scroll_screen.RefreshClipDisLine();
    }

    private fun HandleTileSelected(ALittle.UILButtonDownEvent event)
    {
        var col = ALittle.Math_Floor(event.rel_x / this._select_tile.width) + 1;
        var row = ALittle.Math_Floor(event.rel_y / this._select_tile.height) + 1;
        this._select_tile.col_index = col;
        this._select_tile.row_index = row;
    }

    private fun HandleWorldChanged(ALittle.UIChangedEvent event)
    {
        var world = ALittle.Math_ToInt(this._world_input.text);
        if (world == null || world < 0) return;
        var subworld = ALittle.Math_ToInt(this._subworld_input.text);
        if (subworld == null || world < 0) return;

        this.Load(world, subworld);
    }

    private fun HandleSaveClick(ALittle.UILButtonDownEvent event)
    {
        this.Save();
    }

    private fun HandleBackClick(ALittle.UILButtonDownEvent event)
    {
        this.Save();
        this.Hide();
        ALittle.System_SetViewSize(ALittle.Math_Floor(g_GCenter.login_scene.width), ALittle.Math_Floor(g_GCenter.login_scene.height));
        g_GCenter.login_scene.Show();
    }
}
